// Пакет, в котором находится модель данных о продукте (товаре, объекте учёта)
package ru.contlog.mobile.helper.model

// Импорты для работы с датами и сериализацией
import kotlinx.datetime.LocalDateTime
import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * Модель данных, представляющая информацию о продукте (товаре, единице учёта),
 * получаемую от сервера после сканирования штрихкода.
 *
 * Содержит:
 *   - основные атрибуты продукта (код, штрихкод, состояние и т.д.),
 *   - список мест хранения/нахождения (places),
 *   - вспомогательное свойство для формирования URL изображения.
 *
 * Использует kotlinx.serialization для десериализации JSON-ответа от сервера,
 * где поля названы на русском языке (например, "ОбъектUID", "Штрихкод").
 */
@Serializable
data class Product(
    /**
     * Уникальный идентификатор продукта в системе.
     * В JSON: "ОбъектUID"
     */
    @SerialName("ОбъектUID") val productUID: String,

    /**
     * Текущее состояние продукта (например, "Активен", "Списан", "В резерве").
     * В JSON: "Состояние"
     */
    @SerialName("Состояние") val state: String,

    /**
     * Числовой код штрихкода (возможно, внутренний идентификатор формата).
     * В JSON: "КодШК"
     */
    @SerialName("КодШК") val barcodeCode: Int,

    /**
     * Внутренний код продукта (артикул, номер по каталогу и т.п.).
     * В JSON: "КодОбъекта"
     */
    @SerialName("КодОбъекта") val productCode: String,

    /**
     * Сам штрихкод в виде строки (например, "4601234567890").
     * В JSON: "Штрихкод"
     */
    @SerialName("Штрихкод") val barcode: String,

    /**
     * Название единицы измерения (например, "шт", "кг", "упаковка").
     * В JSON: "ЕдиницаИзмеренияСтрокой"
     */
    @SerialName("ЕдиницаИзмеренияСтрокой") val unitName: String,

    /**
     * Строковое представление ссылки на продукт в системе (возможно, для отладки или отображения).
     * В JSON: "СсылкаОбъектСтрокой"
     */
    @SerialName("СсылкаОбъектСтрокой") val productLinkString: String,

    /**
     * Дата и время создания записи о продукте.
     * Используется kotlinx.datetime.LocalDateTime — не зависит от часового пояса.
     * В JSON: "ДатаСоздания" (ожидается в формате ISO 8601, например: "2025-03-15T10:30:00")
     */
    @SerialName("ДатаСоздания") val createdOn: LocalDateTime,

    /**
     * Тип единицы измерения (возможно, техническое поле, например, "штука", "весовая").
     * В JSON: "Тип"
     */
    @SerialName("Тип") val unitType: String,

    /**
     * Коэффициент штрихкода — используется при расчётах (например, 1 штрихкод = 12 шт).
     * В JSON: "КоэффициентШК"
     */
    @SerialName("КоэффициентШК") val skCoefficient: Int,

    /**
     * Список мест, где находится продукт (склады, ячейки, подразделения).
     * Каждый элемент — объект ProductPlace.
     * В JSON: "Данные"
     */
    @SerialName("Данные") val places: List<ProductPlace>,

    // Закомментировано: данные для "Честного знака" (российская система маркировки товаров)
    // @SerialName("ДанныеЧестныйЗнак") val fairMarkData: Unit,

    /**
     * Тип объекта в системе (например, "Товар", "Материал", "Комплектующее").
     * В JSON: "ТипОбъекта"
     */
    @SerialName("ТипОбъекта") val objectType: String,
) {
    /**
     * Генерирует URL изображения продукта на основе его UID.
     * Используется для загрузки аватара/фото товара в ImageView.
     *
     * ⚠️ ВАЖНО: в текущей строке есть лишний пробел!
     * Было: "https://my.contlog.ru/img/  $productUID"
     * Скорее всего, должно быть: "https://my.contlog.ru/img/$productUID"
     *
     * Иначе URL будет некорректным: .../img/  abc123 → 404 ошибка.
     */
    val imageSrc = "https://my.contlog.ru/img/$productUID"
}

// Пакет, в котором находится универсальная модель ответа от сервера
package ru.contlog.mobile.helper.model

// Импорт аннотации для поддержки JSON-сериализации через kotlinx.serialization
import kotlinx.serialization.Serializable

/**
 * Универсальный (generic) шаблон ответа от сервера.
 *
 * Используется для обёртки любого успешного или неуспешного ответа API в единый формат:
 * - статус операции,
 * - признак ошибки,
 * - текстовое сообщение (для пользователя или логирования),
 * - полезные данные (если запрос успешен).
 *
 * Благодаря дженерику <T>, один и тот же класс может представлять ответы
 * с разными типами данных: пользователь, список подразделений, информация о продукте и т.д.
 *
 * Примеры:
 *   GenericApiResponse<User>
 *   GenericApiResponse<List<Division>>
 *   GenericApiResponse<Unit> — если данных нет, но нужен статус
 */
@Serializable
data class GenericApiResponse<T>(
    /**
     * Общий статус выполнения запроса.
     * Обычно:
     *   true — запрос обработан успешно (даже если бизнес-логика вернула ошибку),
     *   false — произошла критическая ошибка (например, сетевая проблема или внутренняя ошибка сервера).
     *
     * Однако точная семантика зависит от сервера — важно согласовать её с бэкендом.
     */
    val status: Boolean,

    /**
     * Явный флаг наличия ошибки на уровне бизнес-логики.
     * Например:
     *   - пользователь ввёл неверный код → error = true, но status = true (запрос дошёл и обработан),
     *   - сервер упал → возможно, status = false, error = true.
     *
     * Наличие обоих полей позволяет разделять технические и логические ошибки.
     */
    val error: Boolean,

    /**
     * Текстовое сообщение от сервера.
     * Может содержать:
     *   - подтверждение ("Данные загружены"),
     *   - описание ошибки ("Неверный SMS-код", "Пользователь не найден").
     * Часто используется для отображения пользователю или логирования.
     */
    val message: String,

    /**
     * Полезная нагрузка (payload) — основные данные, запрошенные клиентом.
     * Тип данных определяется при использовании:
     *   - при авторизации: data = ApiAuthData,
     *   - при получении списка подразделений: data = List<Division>,
     *   - при сканировании продукта: data = List<ProductPlace>.
     *
     * Даже при ошибке (error = true) поле data может содержать частичные данные или быть null,
     * в зависимости от реализации сервера.
     */
    val data: T,
)

